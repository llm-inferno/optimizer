package main

import (
	"encoding/json"
	"fmt"

	"github.com/llm-inferno/optimizer/pkg/config"
)

func main() {
	// accelerator names
	aNames := []string{"AIU2", "L4", "L40S", "MI210", "A100", "G2", "MI250", "H100",
		"MI300X", "2xAIU2", "2xMI210", "2xA100", "2xG2", "2xMI250", "2xH100", "2xMI300X",
		"4xAIU2", "4xMI210", "4xA100", "4xG2", "4xMI250"}

	// model names
	mNames := []string{"granite_13b", "granite_20b", "granite_34b", "llama_7b", "llama_13b",
		"llama3_8b", "llama_70b", "mistral_7b", "mixtral_8_7b"}

	// model specs
	//	1D: models
	//	2D: accelerators x models

	// memSize := []int{39, 60, 102, 21, 39, 72, 210, 21, 168}

	alpha := [][]float32{
		{205.80, 297.80, 487.70, 116.90, 201.30, 129.30, 274.10, 123.20, 296.30},
		{137.20, 198.53, 325.13, 77.93, 134.20, 86.20, 182.73, 82.13, 197.53},
		{47.86, 69.26, 113.42, 27.19, 46.81, 30.07, 63.74, 28.65, 68.91},
		{25.10, 36.32, 59.48, 14.26, 24.55, 15.77, 33.43, 15.02, 36.13},
		{20.58, 29.78, 48.77, 11.69, 20.13, 12.93, 27.41, 12.32, 29.63},
		{17.15, 24.82, 40.64, 9.74, 16.78, 10.78, 22.84, 10.27, 24.69},
		{12.86, 18.61, 30.48, 7.31, 12.58, 8.08, 17.13, 7.70, 18.52},
		{12.25, 17.73, 29.03, 6.96, 11.98, 7.70, 16.32, 7.33, 17.64},
		{7.77, 11.24, 18.40, 4.41, 7.60, 4.88, 10.34, 4.65, 11.18},
		{147.00, 212.71, 348.36, 83.50, 143.79, 92.36, 195.79, 88.00, 211.64},
		{17.74, 25.67, 42.04, 10.08, 17.35, 11.15, 23.63, 10.62, 25.54},
		{14.60, 21.12, 34.59, 8.29, 14.28, 9.17, 19.44, 8.74, 21.01},
		{12.11, 17.52, 28.69, 6.88, 11.84, 7.61, 16.12, 7.25, 17.43},
		{9.11, 13.18, 21.58, 5.17, 8.91, 5.72, 12.13, 5.45, 13.11},
		{8.65, 12.51, 20.49, 4.91, 8.46, 5.43, 11.52, 5.18, 12.45},
		{5.49, 7.94, 13.01, 3.12, 5.37, 3.45, 7.31, 3.29, 7.90},
		{102.90, 148.90, 243.85, 58.45, 100.65, 64.65, 137.05, 61.60, 148.15},
		{12.55, 18.16, 29.74, 7.13, 12.27, 7.88, 16.71, 7.51, 18.07},
		{10.29, 14.89, 24.39, 5.85, 10.07, 6.47, 13.71, 6.16, 14.82},
		{8.58, 12.41, 20.32, 4.87, 8.39, 5.39, 11.42, 5.13, 12.35},
		{6.43, 9.31, 15.24, 3.65, 6.29, 4.04, 8.57, 3.85, 9.26},
	}

	beta := [][]float32{
		{4.10, 5.00, 8.20, 6.30, 8.70, 5.90, 70.70, 4.10, 60.10},
		{2.73, 3.33, 5.47, 4.20, 5.80, 3.93, 47.13, 2.73, 40.07},
		{0.95, 1.16, 1.91, 1.47, 2.02, 1.37, 16.44, 0.95, 13.98},
		{0.50, 0.61, 1.00, 0.77, 1.06, 0.72, 8.62, 0.50, 7.33},
		{0.41, 0.50, 0.82, 0.63, 0.87, 0.59, 7.07, 0.41, 6.01},
		{0.34, 0.42, 0.68, 0.53, 0.73, 0.49, 5.89, 0.34, 5.01},
		{0.26, 0.31, 0.51, 0.39, 0.54, 0.37, 4.42, 0.26, 3.76},
		{0.24, 0.30, 0.49, 0.38, 0.52, 0.35, 4.21, 0.24, 3.58},
		{0.15, 0.19, 0.31, 0.24, 0.33, 0.22, 2.67, 0.15, 2.27},
		{2.93, 3.57, 5.86, 4.50, 6.21, 4.21, 50.50, 2.93, 42.93},
		{0.35, 0.43, 0.71, 0.54, 0.75, 0.51, 6.09, 0.35, 5.18},
		{0.29, 0.35, 0.58, 0.45, 0.62, 0.42, 5.01, 0.29, 4.26},
		{0.24, 0.29, 0.48, 0.37, 0.51, 0.35, 4.16, 0.24, 3.54},
		{0.18, 0.22, 0.36, 0.28, 0.38, 0.26, 3.13, 0.18, 2.66},
		{0.17, 0.21, 0.34, 0.26, 0.37, 0.25, 2.97, 0.17, 2.53},
		{0.11, 0.13, 0.22, 0.17, 0.23, 0.16, 1.89, 0.11, 1.60},
		{2.05, 2.50, 4.10, 3.15, 4.35, 2.95, 35.35, 2.05, 30.05},
		{0.25, 0.30, 0.50, 0.38, 0.53, 0.36, 4.31, 0.25, 3.66},
		{0.21, 0.25, 0.41, 0.32, 0.44, 0.30, 3.54, 0.21, 3.01},
		{0.17, 0.21, 0.34, 0.26, 0.36, 0.25, 2.95, 0.17, 2.50},
		{0.13, 0.16, 0.26, 0.20, 0.27, 0.18, 2.21, 0.13, 1.88},
	}

	maxBatchSize := [][]int{
		{51, 38, 19, 102, 51, 25, 8, 102, 12},
		{9, 7, 3, 19, 9, 4, 1, 19, 2},
		{19, 14, 7, 38, 19, 9, 3, 38, 4},
		{25, 19, 9, 51, 25, 12, 4, 51, 6},
		{32, 24, 12, 64, 32, 16, 5, 64, 8},
		{38, 28, 14, 76, 38, 19, 6, 76, 9},
		{51, 38, 19, 102, 51, 25, 8, 102, 12},
		{32, 24, 12, 64, 32, 16, 5, 64, 8},
		{76, 57, 28, 153, 76, 38, 12, 153, 19},
		{51, 38, 19, 102, 51, 25, 8, 102, 12},
		{25, 19, 9, 51, 25, 12, 4, 51, 6},
		{32, 24, 12, 64, 32, 16, 5, 64, 8},
		{38, 28, 14, 76, 38, 19, 6, 76, 9},
		{51, 38, 19, 102, 51, 25, 8, 102, 12},
		{32, 24, 12, 64, 32, 16, 5, 64, 8},
		{76, 57, 28, 153, 76, 38, 12, 153, 19},
		{51, 38, 19, 102, 51, 25, 8, 102, 13},
		{25, 19, 9, 51, 25, 13, 4, 51, 6},
		{32, 24, 12, 64, 32, 16, 5, 64, 8},
		{38, 29, 14, 77, 38, 19, 6, 77, 9},
		{51, 38, 19, 102, 51, 25, 8, 102, 13},
	}

	count := [][]int{
		{1, 1, 1, 1, 1, 1, 2, 1, 2},
		{2, 4, 4, 1, 2, 4, 8, 1, 8},
		{1, 2, 4, 1, 1, 2, 4, 1, 4},
		{1, 1, 2, 1, 1, 2, 4, 1, 4},
		{1, 1, 2, 1, 1, 1, 4, 1, 4},
		{1, 1, 2, 1, 1, 1, 4, 1, 2},
		{1, 1, 1, 1, 1, 1, 2, 1, 2},
		{1, 1, 2, 1, 1, 1, 4, 1, 4},
		{1, 1, 1, 1, 1, 1, 2, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 2, 1, 2},
		{1, 1, 1, 1, 1, 1, 2, 1, 2},
		{1, 1, 1, 1, 1, 1, 2, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 2, 1, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
		{1, 1, 1, 1, 1, 1, 1, 1, 1},
	}

	atTokens := 512

	gammaFactor := float32(8)
	deltaFactor := float32(32)

	// select using masks
	useMask := false
	if useMask {
		accMask := []int{0, 1, 4, 5, 9, 18}
		aNames = MaskArray(aNames, accMask)

		modMask := []int{0, 2, 4, 6, 8}
		mNames = MaskArray(mNames, modMask)

		alpha = MaskMatrix(alpha, accMask, modMask)
		beta = MaskMatrix(beta, accMask, modMask)
		maxBatchSize = MaskMatrix(maxBatchSize, accMask, modMask)
		count = MaskMatrix(count, accMask, modMask)
	}

	// create data structures
	numAcc := len(aNames)
	numModels := len(mNames)
	models := config.ModelData{
		PerfData: make([]config.ModelAcceleratorPerfData, numModels*numAcc),
	}
	k := 0
	for i, n := range mNames {
		for j, a := range aNames {
			pd := config.ModelAcceleratorPerfData{
				Name:         n,
				Acc:          a,
				AccCount:     count[j][i],
				MaxBatchSize: maxBatchSize[j][i],
				AtTokens:     atTokens,
				DecodeParms: config.DecodeParms{
					Alpha: alpha[j][i],
					Beta:  beta[j][i],
				},
				PrefillParms: config.PrefillParms{
					Gamma: alpha[j][i] * gammaFactor,
					Delta: beta[j][i] / deltaFactor,
				},
			}
			models.PerfData[k] = pd
			k++
		}
	}

	// generate json
	if byteValue, err := json.Marshal(models); err != nil {
		fmt.Println(err.Error())
	} else {
		fmt.Println(string(byteValue))
	}
}

func MaskArray[T any](data []T, mask []int) []T {
	maskedData := make([]T, len(mask))
	for i, j := range mask {
		if j >= 0 && j < len(data) {
			maskedData[i] = data[j]
		}
	}
	return maskedData
}

func MaskMatrix[T any](data [][]T, maskRow []int, maskCol []int) [][]T {
	numRow := len(data)
	numCol := len(data[0])

	m := len(maskRow)
	n := len(maskCol)

	maskedData := make([][]T, m)
	for i := range m {
		maskedData[i] = make([]T, n)
	}

	for i := range m {
		for j := range n {
			if maskRow[i] >= 0 && maskRow[i] < numRow &&
				maskCol[j] >= 0 && maskCol[j] < numCol {
				maskedData[i][j] = data[maskRow[i]][maskCol[j]]
			}
		}
	}
	return maskedData
}
